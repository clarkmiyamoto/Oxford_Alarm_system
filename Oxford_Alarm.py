# -*- coding: utf-8 -*-
"""
===========================================
Program : Oxford_Alarm_System/Oxford_Triton_Alarm.py
===========================================
Summary: Sends out an email when pulse tubes are off
         or when the fridge's temperature is >= 50mK
"""
__author__ = "Clark Miyamoto"

from Oxford_Triton import Oxford_Triton
from Emailer import Emailer
import csv
import time

def get_subject(pt_off, mc_temp_high, temp):
    subject = []
    head_string = "[URGENT] "
    separator = ". "

    subject.append(head_string)
    if pt_off:
        subject.append("Oxford's Pulse Tubes are OFF")
        subject.append(separator)
    if mc_temp_high:
        subject.append("Oxford is WARM.")
        
    
    tail_string = " Current temperature is {} K.".format(temp)
    subject.append(tail_string)

    subject = "".join(subject)
    return subject

def get_email_list():
    with open('emails.csv') as f:
        reader = csv.reader(f)
        email_list = list(reader)[0]
    return email_list

def get_content(content="This message has been automatically generated by Oxford_Triton_Alarm script from LFL Emailer Bot."):
    return content

def start_alarm_system(folder_path, mc_channel_id=6, temp_threshold=0.05, wait_time=60):

    ot = Oxford_Triton('ot_fridge',
                file_path=folder_path)

    stop = False
    text_list = [""]
    email_list = get_email_list()
    log_folder_path = r'C:\Users\lfl\Oxford_Triton logs'

    while (not stop):

        pulse_tube_status = ot.get_pulse_tube_status()
        mc_temp = ot.get_temperature('mc')

        print("Pulse Tube Status: {}".format(pulse_tube_status))
        print("MC Temperature: {} K".format(mc_temp))

        pulse_tube_off = bool(pulse_tube_status == 0)
        mc_temp_high = bool(mc_temp >= temp_threshold)

        if pulse_tube_off or mc_temp_high:
            subject = get_subject(pulse_tube_off, mc_temp_high, mc_temp)
            content = get_content()
            Email = Emailer(email_list, text_list,
                    subjectLine=subject,
                    emailContent=content)
            Email.alert()
            stop = True
            exit()

        print("Waiting for next reading...")
        time.sleep(wait_time)




if __name__ == "__main__":
    folder_path =  log_folder_path
    start_alarm_system(folder_path)